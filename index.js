// Generated by CoffeeScript 1.9.0
(function() {
  var api_actions, boot_compute_service, boot_console_service, bootloader, connect_to_broker, disconnect_from_broker, punk, read_options, start_rest_app, util;

  util = require("util");

  punk = {};

  punk.log = function(msg) {
    var ts;
    ts = new Date();
    return console.log("[punk] " + ts + " : " + msg);
  };

  boot_compute_service = function(ctx) {
    var sub;
    punk.log("Booting Compute Service");
    sub = context.socket('SUBSCRIBE');
    return sub.connect('compute');
  };

  api_actions = {};

  api_actions.load_client = function(req, res, ctx) {
    punk.log("Responding to /");
    return res.send('Hello World!');
  };

  api_actions.ping = function(req, res, ctx) {
    return punk.log("Responding to /ping");
  };

  boot_console_service = function(ctx) {
    var pub;
    punk.log("Booting Console Service");
    pub = ctx.socket('PUBLISH');
    return pub.connect('compute', function() {
      return start_rest_app(pub);
    });
  };

  start_rest_app = function(pub) {
    var app, express, server;
    punk.log("Starting Rest app");
    express = require("express");
    app = express();
    app.get('/', function(req, res) {
      return api_actions.load_client(req, res, ctx);
    });
    app.get('/ping', function(req, res) {
      return api_actions.ping(req, res, ctx);
    });
    return server = app.listen(3000, function() {
      var host, msg, port;
      host = server.address().address;
      port = server.address().port;
      msg = util.format('Console service listening at http://%s:%s', host, port);
      return punk.log(msg);
    });
  };

  disconnect_from_broker = function(ctx) {
    punk.log("disconnecting from broker");
    return ctx.close();
  };

  connect_to_broker = function(callback, address) {
    var broker_uri, context;
    if (address == null) {
      address = "localhost";
    }
    broker_uri = "amqp://" + address;
    punk.log("connecting to message broker at " + broker_uri);
    context = require('rabbit.js').createContext(broker_uri);
    context.on('ready', function() {
      return callback(context);
    });
    context.on('error', function(msg) {
      return punk.log(util.format("Broker Context Error (%s)", msg));
    });
    return process.on('SIGINT', function() {
      return disconnect_from_broker(context);
    });
  };

  read_options = function() {
    var argv;
    punk.log("reading command line options");
    argv = require("argv");
    argv.info(' Punk. Invoke with console or compute ');
    argv.version("0.0.0");
    argv.option({
      name: "amqp-broker",
      short: "b",
      type: "string"
    });
    argv.option({
      name: "http-port",
      short: "p",
      type: "int"
    });
    return argv.run();
  };

  bootloader = function() {
    var args, mode;
    punk.log("booting");
    args = read_options();
    mode = args["targets"][0];
    if (mode === "compute") {
      return connect_to_broker(boot_compute_service);
    } else if (mode === "console") {
      return connect_to_broker(boot_console_service);
    } else {
      return punk.log("You gotta tell me compute or console");
    }
  };

  bootloader();

}).call(this);
